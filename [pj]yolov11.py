# -*- coding: utf-8 -*-
"""[PJ]YOLOv11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hsri2Hw5DxUQ_LpUQJdFj6_UCNQxapK9

# **YOLO-POSE 모델**

## Import
"""

!pip install ultralytics

import cv2
import torch
import random
import torch.nn as nn
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

# model = YOLO('yolo11m-pose.pt')
model = YOLO('yolo11n-pose.pt')

"""## 이미지"""

img = cv2.imread('/content/family.jpg')
results = model(img)

for result in results:
  # 바운딩박스
  x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
  conf = result.boxes.conf.cpu().numpy().astype(float)
  cls = result.boxes.cls.cpu().numpy().astype(int)

  for i in range(len(cls)):
    random.seed()
    color = [random.randint(0, 255) for _ in range(3)]
    key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
    cv2.rectangle(img, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
    cv2.putText(img, f'{conf[i]:.2f}', (x1[i], y1[i] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    # 키포인트값
    for j in range(len(key_x)):
      cv2.circle(img, (key_x[j], key_y[j]), 3, color, -1)

cv2_imshow(img)

"""## 동영상"""

cap = cv2.VideoCapture('/content/cctv_assault_cut.mp4')

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('/content/out.mp4', fourcc, 24, (int(cap.get(3)), int(cap.get(4))))

while cap.isOpened():
  ret, frame = cap.read()
  if not ret:
    break

  results = model(frame)

  for result in results:
    # 바운딩박스
    x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
    conf = result.boxes.conf.cpu().numpy().astype(float)
    cls = result.boxes.cls.cpu().numpy().astype(int)

    for i in range(len(cls)):
      random.seed()
      color = [random.randint(0, 255) for _ in range(3)]
      key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
      cv2.rectangle(frame, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
      cv2.putText(frame, f'{conf[i]:.2f}', (x1[i], y1[i] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

      # 키포인트값
      for j in range(len(key_x)):
        cv2.circle(frame, (key_x[j], key_y[j]), 3, color, -1)

  out.write(frame)

cap.release()
out.release()
cv2.destroyAllWindows()

"""# **YOLO-POSE + Tracker**

## 이미지
"""

img = cv2.imread('/content/family.jpg')
results = model.track(img)

for result in results:
  # 바운딩박스
  x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
  conf = result.boxes.conf.cpu().numpy().astype(float)
  id = result.boxes.id.cpu().numpy().astype(int)

  for i in range(len(id)):
    random.seed()
    color = [random.randint(0, 255) for _ in range(3)]
    key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
    cv2.rectangle(img, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
    cv2.putText(img, f'ID:{id[i]}, Conf:{conf[i]:.2f}', (x1[i], y1[i] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    # 키포인트값
    for j in range(len(key_x)):
      cv2.circle(img, (key_x[j], key_y[j]), 5, color, -1)

cv2_imshow(img)

"""## 동영상"""

cap = cv2.VideoCapture('/content/cctv_assault_cut.mp4')

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('/content/out2.mp4', fourcc, 24, (int(cap.get(3)), int(cap.get(4))))

while cap.isOpened():
  ret, frame = cap.read()
  if not ret:
    break

  results = model.track(frame)

  for result in results:
    # 바운딩박스
    x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
    conf = result.boxes.conf.cpu().numpy().astype(float)
    id = result.boxes.id.cpu().numpy().astype(int)

    for i in range(len(id)):
      random.seed()
      color = [random.randint(0, 255) for _ in range(3)]
      key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
      cv2.rectangle(frame, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
      cv2.putText(frame, f'ID:{id[i]}, Conf:{conf[i]:.2f}', (x1[i], y1[i] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

      # 키포인트값
      for j in range(len(key_x)):
        cv2.circle(frame, (key_x[j], key_y[j]), 3, color, -1)

  out.write(frame)

cap.release()
out.release()
cv2.destroyAllWindows()

"""## 동영상2차"""

cap = cv2.VideoCapture('/content/cctv_assault_cut.mp4')

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('/content/out3.mp4', fourcc, 24, (int(cap.get(3)), int(cap.get(4))))

while cap.isOpened():
  ret, frame = cap.read()
  if not ret:
    break

  results = model.track(frame, tracker='botsort.yaml')

  for result in results:
    # 바운딩박스
    x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
    conf = result.boxes.conf.cpu().numpy().astype(float)
    id = result.boxes.id.cpu().numpy().astype(int)

    for i in range(len(id)):
      random.seed()
      color = [random.randint(0, 255) for _ in range(3)]
      key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
      cv2.rectangle(frame, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
      cv2.putText(frame, f'ID:{id[i]}, Conf:{conf[i]:.2f}', (x1[i], y1[i] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

      # 키포인트값
      for j in range(len(key_x)):
        cv2.circle(frame, (key_x[j], key_y[j]), 3, color, -1)

  out.write(frame)

cap.release()
out.release()
cv2.destroyAllWindows()

"""## 동영상3차"""

cap = cv2.VideoCapture('/content/cctv_assault_cut.mp4')

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('/content/out4.mp4', fourcc, 24, (int(cap.get(3)), int(cap.get(4))))

while cap.isOpened():
  ret, frame = cap.read()
  if not ret:
    break

  results = model.track(frame, tracker='botsort.yaml', persist=True)

  for result in results:
    # 바운딩박스
    x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
    conf = result.boxes.conf.cpu().numpy().astype(float)
    id = result.boxes.id.cpu().numpy().astype(int)

    for i in range(len(id)):
      random.seed()
      color = [random.randint(0, 255) for _ in range(3)]
      key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
      cv2.rectangle(frame, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
      cv2.putText(frame, f'ID:{id[i]}, Conf:{conf[i]:.2f}', (x1[i], y1[i] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

      # 키포인트값
      for j in range(len(key_x)):
        cv2.circle(frame, (key_x[j], key_y[j]), 5, color, -1)

  out.write(frame)

cap.release()
out.release()
cv2.destroyAllWindows()

"""## 동영상 4차"""

cap = cv2.VideoCapture('/content/cctv_assault_cut.mp4')

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('/content/out5.mp4', fourcc, 24, (int(cap.get(3)), int(cap.get(4))))

while cap.isOpened():
  ret, frame = cap.read()
  if not ret:
    break

  results = model.track(frame, tracker='botsort.yaml', persist=True)

  for result in results:
    # 바운딩박스
    x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
    conf = result.boxes.conf.cpu().numpy().astype(float)
    id = result.boxes.id.cpu().numpy().astype(int)

    for i in range(len(id)):
      random.seed(i)
      color = [random.randint(0, 255) for _ in range(3)]
      key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
      cv2.rectangle(frame, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
      cv2.putText(frame, f'ID:{id[i]}, Conf:{conf[i]:.2f}', (x1[i], y1[i] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

      # 키포인트값
      for j in range(len(key_x)):
        cv2.circle(frame, (key_x[j], key_y[j]), 5, color, -1)

  out.write(frame)

cap.release()
out.release()
cv2.destroyAllWindows()

"""## 이미지 2차"""

img = cv2.imread('/content/family.jpg')
results = model.track(img)

for result in results:
  img = result.plot(
      conf=True,
      kpt_radius=5,
      kpt_line=False,
      boxes=True,
      # color_mode='class',
      color_mode='instance'
  )

cv2_imshow(img)

"""## 이미지 3차"""

from ultralytics.utils.plotting import Colors

img = cv2.imread('/content/family.jpg')
results = model.track(img)

color_palette = Colors()

for result in results:
  # 바운딩박스
  x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
  conf = result.boxes.conf.cpu().numpy().astype(float)
  id = result.boxes.id.cpu().numpy().astype(int)

  for i in range(len(id)):
    color = color_palette(id[i], True)
    key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
    cv2.rectangle(img, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
    cv2.putText(img, f'ID:{id[i]}, Conf:{conf[i]:.2f}', (x1[i], y1[i] - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2, lineType=cv2.LINE_AA)

    # 키포인트값
    for j in range(len(key_x)):
      cv2.circle(img, (key_x[j], key_y[j]), 5, color, -1, lineType=cv2.LINE_AA)

cv2_imshow(img)

"""## 동영상 5차"""

from ultralytics.utils.plotting import Colors
color_palette = Colors()

cap = cv2.VideoCapture('/content/cctv_assault_cut.mp4')

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('/content/out7.mp4', fourcc, 24, (int(cap.get(3)), int(cap.get(4))))

while cap.isOpened():
  ret, frame = cap.read()
  if not ret:
    break

  results = model.track(frame, tracker='botsort.yaml', persist=True)

  for result in results:
    # 바운딩박스
    x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
    conf = result.boxes.conf.cpu().numpy().astype(float)
    id = result.boxes.id.cpu().numpy().astype(int)

    for i in range(len(id)):
      color = color_palette(id[i], True)
      key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
      cv2.rectangle(frame, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
      cv2.putText(frame, f'ID:{id[i]}, Conf:{conf[i]:.2f}', (x1[i], y1[i] - 10),
                cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2, lineType=cv2.LINE_AA)

      # 키포인트값
      for j in range(len(key_x)):
        cv2.circle(frame, (key_x[j], key_y[j]), 6, color, -1, lineType=cv2.LINE_AA)

  out.write(frame)

cap.release()
out.release()
cv2.destroyAllWindows()



"""## 동영상 6차"""

from ultralytics.utils.plotting import Colors
color_palette = Colors()

cap = cv2.VideoCapture('/content/cctv_assault_cut.mp4')

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('/content/out7.mp4', fourcc, 24, (int(cap.get(3)), int(cap.get(4))))

while cap.isOpened():
  ret, frame = cap.read()
  if not ret:
    break

  results = model.track(frame, tracker='botsort.yaml', persist=True)

  for result in results:
    # 바운딩박스
    x1, y1, x2, y2 = zip(*result.boxes.xyxy.cpu().numpy().astype(int))
    conf = result.boxes.conf.cpu().numpy().astype(float)
    ids = result.boxes.id.cpu().numpy().astype(int)

    for i in range(len(ids)):
      if ids[i] == 1:
        color = color_palette(ids[i], True)
        key_x, key_y = zip(*result.keypoints.xy[i].cpu().numpy().astype(int))
        cv2.rectangle(frame, (x1[i], y1[i]), (x2[i], y2[i]), color, 2)
        cv2.putText(frame, f'ID:{ids[i]}, Conf:{conf[i]:.2f}', (x1[i], y1[i] - 10),
                  cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2, lineType=cv2.LINE_AA)

        # 키포인트값
        for j in range(len(key_x)):
          cv2.circle(frame, (key_x[j], key_y[j]), 6, color, -1, lineType=cv2.LINE_AA)

  out.write(frame)

cap.release()
out.release()
cv2.destroyAllWindows()